
Lab1_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086e  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a6  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040a  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a6  00000000  00000000  000018d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	3b c0       	rjmp	.+118    	; 0x112 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x00; PORTB = 0xFF;
  a4:	14 b8       	out	0x04, r1	; 4
  a6:	85 b9       	out	0x05, r24	; 5
	DDRC = 0x00; PORTC = 0xFF;
  a8:	17 b8       	out	0x07, r1	; 7
  aa:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xFF; PORTD = 0x00; 
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	1b b8       	out	0x0b, r1	; 11
				outputD = (outputD | 0x02);
			else
				outputD = (outputD & 0xFD);
				
		else
			outputD = (outputD & 0xFD);
  b0:	a0 e0       	ldi	r26, 0x00	; 0
			else
				outputD = (outputD & 0xFD);
				
		else if(weightA < weightC)
			if(weightC - weightA > 80)
				outputD = (outputD | 0x02);
  b2:	b2 e0       	ldi	r27, 0x02	; 2
	while(1)
	{
		unsigned char outputD = 0x00;
		unsigned int totalWeight = 0x00;
		
		unsigned char weightA = PINA;
  b4:	50 b1       	in	r21, 0x00	; 0
		unsigned char weightB = PINB;
  b6:	83 b1       	in	r24, 0x03	; 3
		unsigned char weightC = PINC;
  b8:	46 b1       	in	r20, 0x06	; 6
		
		totalWeight = weightA + weightB + weightC;
  ba:	25 2f       	mov	r18, r21
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	64 2f       	mov	r22, r20
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	e8 0f       	add	r30, r24
  c6:	f1 1d       	adc	r31, r1
  c8:	cf 01       	movw	r24, r30
  ca:	86 0f       	add	r24, r22
  cc:	97 1f       	adc	r25, r23
  ce:	fc 01       	movw	r30, r24
		
		if(weightA > weightC)
  d0:	45 17       	cp	r20, r21
  d2:	38 f4       	brcc	.+14     	; 0xe2 <main+0x44>
			if(weightA - weightC > 80)
  d4:	26 1b       	sub	r18, r22
  d6:	37 0b       	sbc	r19, r23
  d8:	21 35       	cpi	r18, 0x51	; 81
  da:	31 05       	cpc	r19, r1
  dc:	5c f4       	brge	.+22     	; 0xf4 <main+0x56>
				outputD = (outputD | 0x02);
			else
				outputD = (outputD & 0xFD);
  de:	2a 2f       	mov	r18, r26
  e0:	0e c0       	rjmp	.+28     	; 0xfe <main+0x60>
				
		else if(weightA < weightC)
  e2:	54 17       	cp	r21, r20
  e4:	48 f4       	brcc	.+18     	; 0xf8 <main+0x5a>
			if(weightC - weightA > 80)
  e6:	62 1b       	sub	r22, r18
  e8:	73 0b       	sbc	r23, r19
  ea:	61 35       	cpi	r22, 0x51	; 81
  ec:	71 05       	cpc	r23, r1
  ee:	34 f4       	brge	.+12     	; 0xfc <main+0x5e>
				outputD = (outputD | 0x02);
			else
				outputD = (outputD & 0xFD);
  f0:	2a 2f       	mov	r18, r26
  f2:	05 c0       	rjmp	.+10     	; 0xfe <main+0x60>
		
		totalWeight = weightA + weightB + weightC;
		
		if(weightA > weightC)
			if(weightA - weightC > 80)
				outputD = (outputD | 0x02);
  f4:	2b 2f       	mov	r18, r27
  f6:	03 c0       	rjmp	.+6      	; 0xfe <main+0x60>
				outputD = (outputD | 0x02);
			else
				outputD = (outputD & 0xFD);
				
		else
			outputD = (outputD & 0xFD);
  f8:	2a 2f       	mov	r18, r26
  fa:	01 c0       	rjmp	.+2      	; 0xfe <main+0x60>
			else
				outputD = (outputD & 0xFD);
				
		else if(weightA < weightC)
			if(weightC - weightA > 80)
				outputD = (outputD | 0x02);
  fc:	2b 2f       	mov	r18, r27
				outputD = (outputD & 0xFD);
				
		else
			outputD = (outputD & 0xFD);
				
		if(totalWeight > 140)
  fe:	ed 38       	cpi	r30, 0x8D	; 141
 100:	f1 05       	cpc	r31, r1
 102:	10 f0       	brcs	.+4      	; 0x108 <main+0x6a>
			outputD = (outputD | 0x01);
 104:	21 60       	ori	r18, 0x01	; 1
 106:	01 c0       	rjmp	.+2      	; 0x10a <main+0x6c>
		else
			outputD = (outputD & 0xFE);
 108:	2e 7f       	andi	r18, 0xFE	; 254
			
		outputD = ((totalWeight >> 3) << 3) | outputD;
 10a:	88 7f       	andi	r24, 0xF8	; 248
 10c:	82 2b       	or	r24, r18
		
		PORTD = outputD;
 10e:	8b b9       	out	0x0b, r24	; 11
	}
 110:	d1 cf       	rjmp	.-94     	; 0xb4 <main+0x16>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
